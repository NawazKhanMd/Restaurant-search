{"version":3,"sources":["images/no_data.jpg","Redux Files/Actions & Constants/constants.js","Redux Files/Reducers/home_reducers.js","Redux Files/Reducers/index.js","Utils/fetchInterceptor.js","Redux Files/Actions & Constants/home_actions.js","UI Components/Home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","home_action_types","console","log","initialState","loading","movies","favMovies","localStorage","getItem","JSON","parse","selectedMovie","combineReducers","home","state","action","type","atn_typ","noMoviesFound","pageNumber","payload","Search","indexOfFavMov","findIndex","num","imdbID","push","splice","setItem","stringify","flag","key","process","REACT_APP_API_KEY","restApiUrls","omdbapiURL","getMovieDetails","axios","require","RequestAPI","fetchObj","typeOfRequest","url","get","then","response","catch","error","finally","toogleLoader","dispatch","action_types","getSearchResults","replace","method","resp","data","Response","Home","useDispatch","useSelector","useState","searching","setSearchingFlag","showDetails","setDetailsView","showFavMovies","setFavMoviesView","searchBy","setSearchBy","setPageNumber","toggleFav","movie","object","openModal","setTimeout","className","onClick","icon","faTimes","forEach","id","index","alert","faHeart","onSubmit","e","FormData","target","preventDefault","autocomplete","Row","Col","xs","md","lg","placeholder","name","faSearch","style","backgroundImage","indexOf","Card","Img","variant","src","span","offset","Title","Type","Director","Writer","imdbRating","Released","Year","Actors","Plot","onScroll","Math","round","Number","scrollHeight","scrollTop","clientHeight","map","margin","Poster","Body","Text","store","createStore","rootReducer","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","exact","strict","path","children","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8fc83283.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no_data.0775a7d6.jpg\";","export const home_action_types = {\r\n    loading:'loading',\r\n    get_movies_success:'get_movies_success',\r\n    no_movies_found:'no_movies_found',\r\n    update_fav_movies:'update_fav_movies',\r\n    get_movie_details:'get_movie_details'\r\n} ","import { home_action_types as atn_typ } from '../Actions & Constants/constants'\r\n\r\nconsole.log()\r\n\r\nexport const initialState = {\r\n    loading: false,\r\n    movies: [],\r\n    favMovies: localStorage.getItem('favMovies') == null ? [] : JSON.parse(localStorage.getItem('favMovies')),\r\n    selectedMovie: {}\r\n};\r\n\r\n\r\nexport const home = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case atn_typ.get_movies_success:\r\n            state.noMoviesFound = false;\r\n            if (action.pageNumber == 1) {\r\n                state.movies = [...action.payload.Search]\r\n            } else {\r\n                state.movies = [...state.movies, ...action.payload.Search]\r\n            }\r\n            return { ...state }\r\n        case atn_typ.no_movies_found:\r\n            state.noMoviesFound = true;\r\n            state.movies = [];\r\n            return { ...state }\r\n        case atn_typ.update_fav_movies:\r\n            let indexOfFavMov = state.favMovies.findIndex(num => num == action.payload.imdbID)\r\n            if (indexOfFavMov == -1) {\r\n                state.favMovies.push(action.payload.imdbID)\r\n            } else {\r\n                state.favMovies.splice(indexOfFavMov, 1)\r\n            }\r\n            localStorage.setItem('favMovies', JSON.stringify(state.favMovies));\r\n            state.movies = [...state.movies]\r\n            return { ...state }\r\n        case atn_typ.get_movie_details:\r\n            state.selectedMovie = { ...action.payload }\r\n            return { ...state }\r\n        case atn_typ.loading:\r\n            state.loading = action.flag\r\n            return { ...state }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport {home} from './home_reducers'\r\nexport default combineReducers({\r\n    home\r\n});","const key = JSON.parse(process.env.REACT_APP_SECRETS).REACT_APP_API_KEY\r\nexport const restApiUrls = {\r\nomdbapiURL:`http://www.omdbapi.com/?s={searchKey}&apikey=${key}&page={pageNumber}`,\r\ngetMovieDetails :`http://www.omdbapi.com/?i={IMDBkey}&apikey=${key}&plot=full`\r\n}\r\nconst axios = require('axios');\r\n\r\nexport const RequestAPI = (fetchObj, typeOfRequest) => {\r\n let url = '';\r\n let method = '';\r\n let headerObj = {};\r\n let bodyObj = {};\r\n\r\nurl = fetchObj.url;\r\n return axios.get(url)\r\n .then(function (response) {\r\n  return  { 'type': 'success', 'data': response } \r\n })\r\n .catch(function (error) {\r\n\r\n  return  { 'type': 'failed', 'data': error }   // console.log(error);\r\n })\r\n .finally(function () {\r\n   // always executed\r\n });\r\n}","import { home_action_types as action_types } from '../Actions & Constants/constants'\r\nimport { restApiUrls, RequestAPI } from '../../Utils/fetchInterceptor'\r\n\r\nexport const toogleLoader = (flag) => (dispatch) => {\r\n  dispatch({\r\n    type: action_types.loading,\r\n    flag: flag\r\n  })\r\n}\r\n\r\n\r\n\r\nexport const updateFavMovies = (object) => (dispatch) => {\r\n  dispatch({\r\n    type: action_types.update_fav_movies,\r\n    payload: object\r\n  })\r\n}\r\nexport const removeAllMoviesFromView = () => (dispatch) => {\r\n  dispatch({\r\n    type: action_types.get_movies_success,\r\n    payload: { Search: [] },\r\n    pageNumber: 1\r\n  })\r\n}\r\nexport const getSearchResults = (key, pageNumber = 1,) => (dispatch) => {\r\n  dispatch(toogleLoader(true))\r\n  let fetchObj = {\r\n    url: restApiUrls.omdbapiURL.replace('{searchKey}', key).replace('{pageNumber}', pageNumber),\r\n    method: 'GET'\r\n  }\r\n  return RequestAPI(fetchObj).then(resp => {\r\n    dispatch(toogleLoader(false))\r\n    if (resp.type == 'success') {\r\n      if (resp.data.data.Response == 'True') {\r\n        dispatch({\r\n          type: action_types.get_movies_success,\r\n          payload: resp.data.data,\r\n          pageNumber: pageNumber\r\n        })\r\n      } else {\r\n        dispatch({\r\n          type: action_types.no_movies_found\r\n        })\r\n      }\r\n    } else {\r\n      dispatch(toogleLoader(false))\r\n    }\r\n  })\r\n}\r\nexport const getAllFavMovies = () => (dispatch) => {\r\n  dispatch(toogleLoader(true))\r\n  let FavMovieIDs = JSON.parse(localStorage.getItem('favMovies'));\r\n  FavMovieIDs.forEach((id,index) => {\r\n    let fetchObj = {\r\n      url: restApiUrls.getMovieDetails.replace('{IMDBkey}', id),\r\n      method: 'GET'\r\n    }\r\n    RequestAPI(fetchObj).then(resp => {\r\n      dispatch(toogleLoader(false))\r\n      if (resp.type == 'success') {\r\n        if (resp.data.data.Response == 'True') {\r\n          dispatch({\r\n            type: action_types.get_movies_success,\r\n            payload: {Search:[resp.data.data]},\r\n            pageNumber: index + 1\r\n          })\r\n        } else {\r\n          dispatch({\r\n            type: action_types.no_movies_found\r\n          })\r\n        }\r\n      } else {\r\n        dispatch(toogleLoader(false))\r\n      }\r\n    })\r\n  });\r\n  \r\n  \r\n}\r\nexport const getMovieDetails = (imdbID) => (dispatch) => {\r\n  dispatch(toogleLoader(true))\r\n  let fetchObj = {\r\n    url: restApiUrls.getMovieDetails.replace('{IMDBkey}', imdbID),\r\n    method: 'GET'\r\n  }\r\n  return RequestAPI(fetchObj).then(resp => {\r\n    dispatch(toogleLoader(false))\r\n    if (resp.type == 'success') {\r\n      console.log(resp.data)\r\n      if (resp.data.data.Response == 'True') {\r\n        console.log(resp.data.data)\r\n        dispatch({\r\n          type: action_types.get_movie_details,\r\n          payload: resp.data.data\r\n        })\r\n      } else {\r\n        dispatch({\r\n          type: action_types.no_movies_found\r\n        })\r\n      }\r\n    } else {\r\n      dispatch(toogleLoader(false))\r\n    }\r\n  })\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport {  Row, Col, Card, Button } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {  getSearchResults, updateFavMovies, getMovieDetails, getAllFavMovies, removeAllMoviesFromView } from '../../Redux Files/Actions & Constants'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart, faSearch, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nexport const Home = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const showLoader = useSelector(state => state.home.loading);              // If you want a loader, this is the flag to show/hide\r\n  const movies = useSelector(state => state.home.movies);                   // main list of Movies to Iterate in UI\r\n  const noMoviesFound = useSelector(state => state.home.noMoviesFound);     // Handling if there are no Movies found show/Hide View in UI\r\n  const favMovies = useSelector(state => state.home.favMovies);             // Your selected Fav movies IMDB ID's\r\n  const selectedMovie = useSelector(state => state.home.selectedMovie);     // Once you select a movie card this object will hold the data\r\n  \r\n  const [searching, setSearchingFlag] = useState(false);               //This is callback if you started the search true = Search started\r\n  const [showDetails, setDetailsView] = useState(false);               // Show/Hide the Movie Details banner, if you click on the Movie card this will become true anf will slideup the movie details banner\r\n  const [showFavMovies, setFavMoviesView] = useState(false);           // Show/Hide Fav Movies list , if this is true it will load all the fav movies \r\n  const [searchBy, setSearchBy] = useState('');                        // Search text inputs value is saved into this state\r\n  const [pageNumber, setPageNumber] = useState(1);                     // keeping record of page number for infinite scrolling\r\n\r\n  //Form Sumbit / search button callback to search for the movie name\r\n  const handleSubmit = (e) => {\r\n    const form = new FormData(e.target);\r\n    const key = form.get(\"Search\");\r\n    setSearchBy(key)\r\n    setSearchingFlag(true)\r\n    setFavMoviesView(false)\r\n    dispatch(getSearchResults(key, 1))\r\n    setPageNumber(1)\r\n    e.preventDefault();\r\n  }\r\n  // ToggleFav will updated Favourite Movies List and updates the icon Color\r\n  const toggleFav = (movie) => {\r\n    dispatch(updateFavMovies(movie))\r\n  }\r\n  // For Infinie scrolling till the search results length\r\n  const handleScroll = (e) => {\r\n    if (!showFavMovies) {\r\n      const target = e.target;\r\n      if (Math.round(Number(target.scrollHeight) - Number(target.scrollTop)) === target.clientHeight || Math.round(Number(target.scrollHeight) - Number(target.scrollTop)) === target.clientHeight+1) {\r\n        dispatch(getSearchResults(searchBy, pageNumber + 1))\r\n        setPageNumber(pageNumber + 1)\r\n      }\r\n    }\r\n  }\r\n  // opens Movie Details slide View\r\n  const openModal = (movie) => {\r\n    setTimeout(() => {\r\n      setDetailsView(true)\r\n    }, 200); \r\n    dispatch(getMovieDetails(movie.imdbID))\r\n  }\r\n  // slides back the movie details View\r\n  const closeModal = () => {\r\n    setDetailsView(false)\r\n  }\r\n  //Gets all your fav movies and renders in a list\r\n  const getFavMovies = () => {\r\n    const favMovies = localStorage.getItem('favMovies');\r\n    if(favMovies != null){\r\n    setSearchingFlag(true)\r\n    setFavMoviesView(true)\r\n    dispatch(getAllFavMovies())\r\n  }else{\r\n    alert('Please select some fav movies')\r\n  }\r\n  }\r\n  //remove the fevourite movie View selection back to original page with text input\r\n  const removeFavMovieView = () => {\r\n    if (showFavMovies) {\r\n      \r\n    setSearchingFlag(false)\r\n    setFavMoviesView(false)\r\n    dispatch(removeAllMoviesFromView())\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n     \r\n     \r\n      {/* This is for Showing FavMovies show/hide buttons */}\r\n     <diV className=\"fav-movies-btn\" >\r\n        {showFavMovies && <FontAwesomeIcon onClick={removeFavMovieView} className=\"close-button\" icon={faTimes} />}\r\n        {!showFavMovies && <FontAwesomeIcon onClick={getFavMovies} className=\"small-fav-button\" icon={faHeart} />}\r\n      </diV>\r\n      \r\n\r\n      {/* This is form to handle Search input View and it moves up as the search results load */}\r\n      <div className={searching ? \"input-container  move\" : \"input-container  dontMove\"}>\r\n        <form onSubmit={handleSubmit} autocomplete=\"off\">\r\n          <Row className=\"justify-content-md-center margin0\">\r\n            <Col xs={10} md={12} lg={12} >\r\n              <div className=\"input-card\">\r\n                <input placeholder=\"Search for a movie\" name=\"Search\" type=\"text-input\" ></input>\r\n                <button type=\"submit\" className=\"search-btn\">\r\n                  <FontAwesomeIcon icon={faSearch} />\r\n                </button>\r\n              </div>\r\n              {/* <FontAwesomeIcon icon={faSearch} /> */}\r\n            </Col>\r\n          </Row>\r\n        </form>\r\n\r\n      </div>\r\n      \r\n\r\n      {/* This is to show the selected movies Details in a sliding view moves up/down depending on button clicks */}\r\n      <div className={showDetails ? \"slide-panel  slideUp\" : \"slide-panel  slideDown\"}>\r\n        <div className=\"slide-panel-imageBoard\" style={{ backgroundImage: \"url(\" + selectedMovie['Poster'] + \")\" }}>\r\n          <FontAwesomeIcon onClick={closeModal} className=\"close-button\" icon={faTimes} />\r\n          <FontAwesomeIcon onClick={() => toggleFav(selectedMovie)} className={favMovies.indexOf(selectedMovie.imdbID) == -1 ? \"small-un-fav-button\" : \"small-fav-button\"} icon={faHeart} />\r\n          <Row className=\"margin0\">\r\n            <Col xs={2} md={2} lg={2}>\r\n              <Card>\r\n                <Card.Img variant=\"top\" src={selectedMovie['Poster']} />\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <div className=\"slide-panel-detailsBoard\">\r\n          <Row className=\"margin0\">\r\n            <Col xs={12} md={{ span: 9, offset: 3 }} lg={{ span: 9, offset: 3 }}>\r\n              <div className=\"one-line\"><h3>{selectedMovie.Title} </h3> <p>({selectedMovie.Type})</p> </div>\r\n              {selectedMovie.Director != 'N/A' && <p>Director :  <b>{selectedMovie.Director}</b></p>}\r\n              {selectedMovie.Writer != 'N/A' && <p>Writer :  <b>{selectedMovie.Writer}</b></p>}\r\n              <p>IMDB Rating: <b>{selectedMovie.imdbRating}</b>, Released: <b>{selectedMovie.Released}</b>{selectedMovie.Type == 'series' && <span>, Run Duration: <b>{selectedMovie.Year}</b></span>}</p>\r\n              <div className=\"one-line\">\r\n                <p>Cast: </p>\r\n                <p><b>{selectedMovie.Actors}</b></p>\r\n              </div>\r\n              <div className=\"one-line\">\r\n                <p>Plot: </p>\r\n                <p><b>{selectedMovie.Plot}</b></p>\r\n              </div>\r\n              {/* Actors: \"Kevin Conroy, Efrem Zimbalist Jr., Bob Hastings\"\r\nAwards: \"Won 1 Primetime Emmy. Another 4 wins & 19 nominations.\"\r\nCountry: \"USA\"\r\nDirector: \"N/A\"\r\nGenre: \"Animation, Action, Adventure, Family, Sci-Fi\"\r\nLanguage: \"English\"\r\nMetascore: \"N/A\"\r\nPlot: \"Heir to the Wayne family fortune, Bruce Wayne lives by day as a seemingly lavish playboy millionaire socialite, but by night assumes the role of his crime-fighting alter-ego: the caped crusader known as Batman. Throughout the Animated Series, Batman receives help from sidekicks Robin and Batgirl, as well as Police Commissioner Gordon, in protecting the streets of Gotham City from a large rogue's gallery of criminals, lunatics and nemeses.\"\r\nPoster: \"https://m.media-amazon.com/images/M/MV5BOTM3MTRkZjQtYjBkMy00YWE1LTkxOTQtNDQyNGY0YjYzNzAzXkEyXkFqcGdeQXVyOTgwMzk1MTA@._V1_SX300.jpg\"\r\nRated: \"TV-PG\"\r\nRatings: [{…}]\r\nReleased: \"05 Sep 1992\"\r\nResponse: \"True\"\r\nRuntime: \"23 min\"\r\nTitle: \"Batman: The Animated Series\"\r\nType: \"series\"\r\nWriter: \"Bob Kane, Eric Radomski, Bruce Timm, Paul Dini, Bill Finger\"\r\nYear: \"1992–1995\"\r\nimdbID: \"tt0103359\"\r\nimdbRating: \"9.0\"\r\nimdbVotes: \"84,064\"\r\ntotalSeasons: \"4\" */}\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n      \r\n      \r\n      {/*If there is a error from api or we dont have movies, handling such issues for user */}\r\n      {noMoviesFound && <div className=\"no-movie-container\">\r\n          <img src={require('../../images/no_data.jpg')} />\r\n          <p>Sorry we did not find anything</p>\r\n        </div> }\r\n\r\n\r\n      {/*Iterates Cards as the movies api returns list of movies, slides up and becomes 80% of the screen */}\r\n      <div className=\"movies-container\" onScroll={handleScroll}>\r\n      {showFavMovies && <h5 className=\"orange-text text-center\">Your Favourite Movies</h5>}\r\n        <Row className=\"justify-content-md-center margin0\">\r\n          {movies.map((movie, index) =>\r\n            <Col key={index} xs={12} md={4} lg={2}>\r\n              <Card style={{ margin: '10px' }}>\r\n                <FontAwesomeIcon onClick={() => toggleFav(movie)} className={favMovies.indexOf(movie.imdbID) == -1 ? \"un-fav-button\" : \"fav-button\"} icon={faHeart} />\r\n                <Card.Img onClick={() => openModal(movie)} variant=\"top\" src={movie.Poster} />\r\n                <Card.Body>\r\n                  <Card.Title onClick={() => openModal(movie)} >{movie.Title}</Card.Title>\r\n                  <Card.Text>Year:</Card.Text>\r\n                  <Card.Text>{movie.Year}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n              {/* <div className=\"movie-card\">\r\n            <img src={movie.Poster} />\r\n            </div> */}\r\n            </Col>\r\n          )}\r\n        </Row>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './Redux Files/Reducers'\nimport thunk from \"redux-thunk\";\nimport { Home } from './UI Components/Home'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport const App = () => {\n\n\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route exact strict path=\"/\" children={<Home />} />\n          </Switch>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/scss/bootstrap.scss\"\nimport \"./Styling/index.scss\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}